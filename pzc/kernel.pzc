#include <pzc_builtin.h>
#include "../../common/pzcperf.h"

#include "../param.h"

#define OFFSET  (MAX_TID)
constexpr unsigned int WBUFAD = STACK_SIZE * MAX_TID;
constexpr unsigned int SEEDAD = WBUFAD + sizeof(float) * MAX_TID;
#define LENGTH  (6)
constexpr unsigned int UAD    = SEEDAD + sizeof(unsigned int)  * MAX_TID;
constexpr unsigned int GEXAD  = UAD    + sizeof(float)         * LENGTH;
constexpr unsigned int GINHAD = GEXAD  + sizeof(float)         * LENGTH;
constexpr unsigned int GAHPAD = GINHAD + sizeof(float)         * LENGTH;
constexpr unsigned int SPKAD  = GAHPAD + sizeof(float)         * LENGTH;
constexpr unsigned int TAGAD  = SPKAD  + sizeof(unsigned char) * LENGTH;
constexpr unsigned int WAD    = TAGAD  + sizeof(unsigned char) * 2;
constexpr unsigned int MEMAD  = WAD    + sizeof(unsigned int)  * 1280;

#define wbuf_float ((float*)WBUFAD)
#define wbuf_uchar ((unsigned char*)WBUFAD)
#define wbuf_uint  ((unsigned int*)WBUFAD)
#define wbuf_ulong ((unsigned long*)WBUFAD)
#define seed       ((unsigned int*)SEEDAD)
#define l_u        ((float*)UAD)
#define l_g_ex     ((float*)GEXAD)
#define l_g_inh    ((float*)GINHAD)
#define l_g_ahp    ((float*)GAHPAD)
#define l_spk      ((unsigned char*)SPKAD)
#define tag        ((unsigned char*)TAGAD)
#define l_w        ((unsigned int*)WAD)
#define l_mem      ((unsigned int*)MEMAD)

enum MolecularTag {
  MTAG_NONE,
  MTAG_PKJ,
  MTAG_ST,
  MTAG_VN,
  MTAG_IO
};

PZCPerformance gPerf[MAX_PROF];
void pzc_GetPerformance(PZCPerformance* out, int idx) {
  int tid = get_tid();
  int pid = get_pid();

  if (tid == 0 && pid == 0 && idx < MAX_PROF) {
    *out = gPerf[idx];
    gPerf[idx].Clear();
  }
  flush();
}

static inline unsigned short get_spike(unsigned long s, int i) {
  return (s >> i) & 1UL;
}
static inline void set_spike(unsigned long* s, int i, int x) {
  *s = (unsigned long)(x) * (*s | (1UL << i)) + (unsigned long)(!x) * (*s & ~(1UL << i));
}
static inline int popl(unsigned long x) {
  x = (x & 0x5555555555555555) + ((x >>  1) & 0x5555555555555555);
  x = (x & 0x3333333333333333) + ((x >>  2) & 0x3333333333333333);
  x = (x & 0x0F0F0F0F0F0F0F0F) + ((x >>  4) & 0x0F0F0F0F0F0F0F0F);
  x = (x & 0x00FF00FF00FF00FF) + ((x >>  8) & 0x00FF00FF00FF00FF);
  x = (x & 0x0000FFFF0000FFFF) + ((x >> 16) & 0x0000FFFF0000FFFF);
  x = (x & 0x00000000FFFFFFFF) + ((x >> 32) & 0x00000000FFFFFFFF);
  
  return x & 0x000000000000007F;
}
static inline float genrand(int tid) {
  seed[tid] = seed[tid] * 1566083941 + 1;
  return (float)((seed[tid] >> 16) * (1.52587890625e-05f)); //(1.0f/65536)
}

void pzc_init_local_memory(const unsigned int* seeds, const unsigned int* w) {
  auto pid = get_pid();
  auto tid = get_tid();
  auto idx = pid * MAX_TID + tid;

  if (tid < LENGTH) {
    l_u[tid]     = 0.0f;
    l_g_ex[tid]  = 0.0f;
    l_g_inh[tid] = 0.0f;
    l_g_ahp[tid] = 0.0f;
    l_spk[tid] = 0;
  }
  seed[tid] = seeds[idx];


  auto pref_id  = pid >> 8;
  auto pid_pref = pid & 255;
  auto x = pid_pref & 31;
  auto y = pid_pref >> 5;
  for (auto i = 0; i < 5; i++) {
    auto ax = x + X_GO_4;
    auto ay = y + (pref_id + i * 7) - 4 + Y_GO_4;
    auto cluster_id = ay * (X_GO + X_GO_2) + ax;
    if (cluster_id > (X_GO + X_GO_2) * (Y_GO + Y_GO_2)) break;

    for (auto j = tid; j < 256; j++)
      l_w[i * 256 + j] = w[cluster_id * 256 + j];
  }

  if (tid == 0) {
    l_mem[0] = 0;
    l_mem[1] = 0;
    tag[0] = MTAG_NONE;
    tag[1] = 0;
    if (pref_id < 7) {
      auto mol_nid = pid_pref * 7 + pref_id;
      if (mol_nid < N_PKJ) {
        tag[0] = MTAG_PKJ;
        tag[1] = mol_nid;
      } else {
        mol_nid = (pid_pref - 5) * 7 + pref_id;
        if (mol_nid < 0) return ;
        if (mol_nid < N_ST) {
          tag[0] = MTAG_ST;
          tag[1] = mol_nid + N_PKJ;
        } else if (mol_nid < N_ST + N_VN) {
          tag[0] = MTAG_VN;
          tag[1] = mol_nid + N_PKJ;
        } else if (mol_nid < N_ST + N_VN + N_IO) {
          tag[0] = MTAG_IO;
          tag[1] = mol_nid + N_PKJ;
        }
      }
    }
  }

  return;
}

void pzc_fin_local_memory(float* debug) {
  auto pid = get_pid();
  auto tid = get_tid();
  auto idx = pid * MAX_TID + tid;
  
  if (tid < 2) debug[idx] = tag[tid];
  //else debug[idx] = popl(l_s_gr[tid * 6]);
  else if (tid == 2) debug[idx] = l_u[5];
  else if (tid == 3) debug[idx] = l_g_ex[5];
  else if (tid == 4) debug[idx] = l_g_inh[5];
  else if (tid == 5) debug[idx] = l_g_ahp[5];
  else if (tid == 6) debug[idx] = l_w[0];
  else if (tid == 7) debug[idx] = l_mem[0];

  flush();
  return;
}

void pzc_ltd(const unsigned long *s_gr_list,
             const unsigned int head,
                   unsigned int *w) {
  unsigned short tid = get_tid();
  unsigned short pid = get_pid();
  unsigned short idx = pid * MAX_TID + tid;

  for (unsigned char i = 0; i < MEM_TIME; i++) {
    unsigned char t_index = (head - i + MEM_TIME) % MEM_TIME;

    for (unsigned int j = idx; j < N_S_GR; j += N_MAX_THREADS) {
      const unsigned long *s_gr = &s_gr_list[N_S_GR * t_index + j];

      for (unsigned char k = 0; k < 16; k++) {
        unsigned int w_all = w[j * 16 + k];

        unsigned char s[4];
        s[0] = get_spike(*s_gr, 4 * k    );
        s[1] = get_spike(*s_gr, 4 * k + 1);
        s[2] = get_spike(*s_gr, 4 * k + 2);
        s[3] = get_spike(*s_gr, 4 * k + 3);

        float w_tmp[4];
        w_tmp[0] = ( w_all        & 0xFF) * INV_BYTE;
        w_tmp[1] = ((w_all >>  8) & 0xFF) * INV_BYTE;
        w_tmp[2] = ((w_all >> 16) & 0xFF) * INV_BYTE;
        w_tmp[3] = ((w_all >> 24) & 0xFF) * INV_BYTE;
        
        w_tmp[0] -= w_tmp[0] * ALPHA * s[0];
        w_tmp[1] -= w_tmp[1] * ALPHA * s[1];
        w_tmp[2] -= w_tmp[2] * ALPHA * s[2];
        w_tmp[3] -= w_tmp[3] * ALPHA * s[3];

        s[3] = (int)(w_tmp[0] * 255) & 0xFF;
        s[2] = (int)(w_tmp[1] * 255) & 0xFF;
        s[1] = (int)(w_tmp[2] * 255) & 0xFF;
        s[0] = (int)(w_tmp[3] * 255) & 0xFF;

        w[j * 16 + k] = *((unsigned int*)s);
      }
    }
    flush_L2();
  }
  flush();
  //short base = 64*tid + 256*pid;
  //for (unsigned char i = 0; i < 32; i++) {
  //  unsigned int wall = w[i + base];

  //  for (unsigned char j = 0; j < 32; j++) {
  //    int target = i + base + 262144*j;
  //    if (802816 <= target && target <= 2523136)
  //      w[i + base + 262144*j] = wall;
  //  }
  //}
  //flush();
  auto pref_id  = pid >> 8;
  auto pid_pref = pid & 255;
  auto x = pid_pref & 31;
  auto y = pid_pref >> 5;
  for (auto i = 0; i < 5; i++) {
    auto ax = x + X_GO_4;
    auto ay = y + (pref_id + i * 7) - 4 + Y_GO_4;
    auto cluster_id = ay * (X_GO + X_GO_2) + ax;
    if (cluster_id > (X_GO + X_GO_2) * (Y_GO + Y_GO_2)) break;

    for (auto j = tid; j < 256; j++)
      l_w[i * 256 + j] = w[cluster_id * 256 + j];
  }
}

static void update_gr(const int pid, const int tid, const int index, const int t_e, const int t_i,
                      float* u, float* g_ex, float* g_inh, float* g_ahp, unsigned long* s_gr,
                      const unsigned short* list_grgo, const unsigned char* s_go) {
  auto wbuf_i = 7 - tid;
  auto inh_input = &wbuf_float[2];
  auto mf_firing_rate = 0.03f * 0.5f * (1.0f - cos(2.0f * 3.141592653f * (t_e + t_i) * INV_N_PERIOD)); //6*8Thread*1984PE=95232
  for (auto i = pid; i < N_S_GR; i += MAX_PID) {
    //calc input from go
    {
      auto gr_group_id = i >> 4;

      auto idx = list_grgo[gr_group_id * N_GO + tid];
      auto rnd = genrand(tid); //1
      wbuf_float[tid] = (1.0f              * (rnd < 0.25f)
                        +DECAY_GABA1_GRGO  * (0.25f <= rnd && rnd < 0.5f)
                        +DECAY_GABA1_GRGO2 * (0.5f <= rnd && rnd < 0.75f)
                        +DECAY_GABA1_GRGO3 * (0.75f <= rnd)) * R_GABA1_GRGO * s_go[idx]; //9

      sync_L1();
      if (tid == 0) {
        *inh_input += wbuf_float[0] + wbuf_float[1] + wbuf_float[3] + wbuf_float[4] + wbuf_float[5] + wbuf_float[6] + wbuf_float[7]; //7
        *inh_input *= GAMMA; //1
      } //8
    } //10*8Thread+8=88

    auto spk_block = s_gr[i];
    wbuf_uchar[wbuf_i] = 0;

    sync_L1();
    for (int j = 0; j < 8; j++) {
      auto spk = get_spike(spk_block, tid * 8 + j);
      auto target_neuron_id = i * 64 + tid * 8 + j;
      auto ll_u     = u[target_neuron_id];
      auto ll_g_ex  = g_ex[target_neuron_id];
      auto ll_g_inh = g_inh[target_neuron_id];
      auto ll_g_ahp = g_ahp[target_neuron_id];

      // update conductances
      ll_g_ahp = ll_g_ahp * DECAY_AHP_GR * (!spk) + spk; //3
      ll_g_ex *= DECAY_AMPA_GRMF; //1
      auto sum = 0;
      for (auto k = 0; k < N_MF_PER_GR; k++) //20
        sum += genrand(tid) < (mf_firing_rate * (k == 0) + 0.005f * (k != 0)); //5
      ll_g_ex += LAMBDA * R_AMPA_GRMF * (float)sum; //3
      ll_g_inh *= DECAY_GABA1_GRGO; //1
      ll_g_inh += *inh_input; //1 //29

      // update v
      auto du1 = DT * INV_C_GR * (-GBAR_LEAK_GR            * (ll_u - E_LEAK_GR)
                                  -GBAR_EX_GR   * ll_g_ex  * (ll_u - E_EX_GR)
                                  -GBAR_INH_GR  * ll_g_inh * (ll_u - E_INH_GR)
                                  -GBAR_AHP_GR  * ll_g_ahp * (ll_u - E_AHP_GR)
                                  +I_EX_GR); //17
      auto du2 = DT * INV_C_GR * (-GBAR_LEAK_GR            * (ll_u + du1 - E_LEAK_GR)
                                  -GBAR_EX_GR   * ll_g_ex  * (ll_u + du1 - E_EX_GR)
                                  -GBAR_INH_GR  * ll_g_inh * (ll_u + du1 - E_INH_GR)
                                  -GBAR_AHP_GR  * ll_g_ahp * (ll_u + du1 - E_AHP_GR)
                                  +I_EX_GR); //21 //38
      ll_u += 0.5f * (du1 + du2); //3
      spk = ll_u > TH_GR;
      u[target_neuron_id]     = E_LEAK_GR * spk + ll_u * (!spk); //3
      g_ex[target_neuron_id]  = ll_g_ex;
      g_inh[target_neuron_id] = ll_g_inh;
      g_ahp[target_neuron_id] = ll_g_ahp;
      wbuf_uchar[7 - tid] |= (spk << j);
    } //73*8=584*8Thread=4672
    sync_L1();
    if (tid == 0) s_gr[i] = wbuf_ulong[0];
    flush_L1();
  } //(4672+88)*N_S_GR(16384)=77987840
} //77987840+95232=78083072

static void update_go(const int pid, const int tid, const int index, const int t_e, const int t_i,
                      unsigned char* s_go, const unsigned short* list_gogr, const unsigned long* s_gr) {
  //for (auto i = pid; i < N_GO; i += MAX_PID) {
  if (pid >= N_GO) return;
  {
    auto target_neuron_id = pid + IDX_H_GO;

    // calc input from gr
    auto input = 0.0f;
    wbuf_float[tid] = 0.0f;
    sync_L1();
    for (auto j = 0; j < N_GR_PER_GO; j++) {
      auto idx = list_gogr[pid * N_GO + j];
      auto sp = &s_gr[idx * 16];
      auto spikes_gr = 0;
      spikes_gr += popl(sp[tid          ]);
      spikes_gr += popl(sp[tid + MAX_TID]);
      chgthread();
      //l_mem[0] += spikes_gr;
      for (auto k = 0; k < spikes_gr; k++) {
        auto rnd = genrand(tid);
        wbuf_float[tid] += (1.0f             * (rnd < 0.25f)
                           +DECAY_AMPA_GOGR  * (0.25f <= rnd && rnd < 0.5f)
                           +DECAY_AMPA_GOGR2 * (0.5f <= rnd && rnd < 0.75f)
                           +DECAY_AMPA_GOGR3 * (0.75f <= rnd)); //8
      } //51267708(counted total local_fin.log)*9=461409372
    } //461409372*N_GR_PER_GO(4)=1845637488(add this num finally)

    // update gr state
    if (tid == 0) {
      input = wbuf_float[0] + wbuf_float[1] + wbuf_float[2] + wbuf_float[3] + wbuf_float[4] + wbuf_float[5] + wbuf_float[6] + wbuf_float[7]; //7
      auto spk      = l_spk[tid];
      auto ll_u     = l_u[tid];    // ll is loaded local
      auto ll_g_ex  = l_g_ex[tid];
      auto ll_g_ahp = l_g_ahp[tid];

      // update conductances
      ll_g_ex *= DECAY_AMPA_GOGR; //1
      ll_g_ex += input; //1
      ll_g_ahp = ll_g_ahp * DECAY_AHP_GO * (!spk) + spk; //3

      // update v
      auto du1 = DT * INV_C_GO * (-GBAR_LEAK_GO                         * (ll_u - E_LEAK_GO)
                                  -GBAR_EX_GO   * KAPPA_GOGR * ll_g_ex  * (ll_u - E_EX_GO)
                                  -GBAR_AHP_GO               * ll_g_ahp * (ll_u - E_AHP_GO)
                                  +I_EX_GO); //14
      auto du2 = DT * INV_C_GO * (-GBAR_LEAK_GO                         * (ll_u + du1 - E_LEAK_GO)
                                  -GBAR_EX_GO   * KAPPA_GOGR * ll_g_ex  * (ll_u + du1 - E_EX_GO)
                                  -GBAR_AHP_GO               * ll_g_ahp * (ll_u + du1 - E_AHP_GO)
                                  +I_EX_GO); //17
      ll_u += 0.5f * (du1 + du2); //3
      spk = ll_u > TH_GO;
      l_u[tid]     = E_LEAK_GO * spk + ll_u * (!spk); //3
      l_g_ex[tid]  = ll_g_ex;
      l_g_ahp[tid] = ll_g_ahp;
      l_spk[tid]   = spk;
      s_go[target_neuron_id - IDX_H_GO] = spk;
    } //49
  } //49*N_GO(1024)=50176
  flush_L1();
}

static inline void calc_input_pkjgr_sub(const int pid_pref, const int tid, const int lc, const int offset, // lc is loop counter
                                        const int pkj_id, const unsigned long* s_gr, const unsigned long* s_gr_rect) {
  auto x = pid_pref & 31;
  auto y = (pid_pref >> 5) - 4 + pkj_id;
  auto use_rect = y < 0;
  auto idx = use_rect ? (y + Y_GO_4) * (X_GO + X_GO_2) + (x + X_GO_4) : y * X_GO + x;
  auto spk = use_rect ? s_gr_rect[idx * 16 + tid + offset] : s_gr[idx * 16 + tid + offset];
  auto w_base = lc * 256 + (tid + offset) * 16;
  auto local_sum = 0.0f;
  sync_L1();
  for (auto k = 0; k < 64; k += 4) {
    unsigned short z[4];
    z[0] = get_spike(spk, k);
    z[1] = get_spike(spk, k + 1);
    z[2] = get_spike(spk, k + 2);
    z[3] = get_spike(spk, k + 3);
    auto n = w_base + (k >> 2);
    auto w_all = l_w[n];
    auto part_input = (((w_all      ) & 0xff) * z[0]
                      +((w_all >>  8) & 0xff) * z[1]
                      +((w_all >> 16) & 0xff) * z[2]
                      +((w_all >> 24) & 0xff) * z[3]);
    auto coef = 0.0f;
    l_mem[1] += z[0] + z[1] + z[2] + z[3];
    for (auto l = 0; l < z[0] + z[1] + z[2] + z[3]; l++) {
      auto rnd = genrand(tid);
      coef += (             1.0f * (                rnd < 0.25f)
              +DECAY_AMPA_PKJPF  * (0.25f <= rnd && rnd < 0.5f )
              +DECAY_AMPA_PKJPF2 * (0.5f  <= rnd && rnd < 0.75f)
              +DECAY_AMPA_PKJPF3 * (0.75f <= rnd));
    } //9
    //for (auto l = 0; l < 4; l++) {
    //  auto rnd = genrand(tid);
    //  coef += (             1.0f * (                rnd < 0.25f)
    //          +DECAY_AMPA_PKJPF  * (0.25f <= rnd && rnd < 0.5f )
    //          +DECAY_AMPA_PKJPF2 * (0.5f  <= rnd && rnd < 0.75f)
    //          +DECAY_AMPA_PKJPF3 * (0.75f <= rnd)) * z[l];
    //} //10*4=40
    local_sum += KAPPA_PKJPF * 0.0009766f * part_input * coef; //4
  }
  wbuf_float[tid] += local_sum; //1
} //5

static void calc_input_pkjgr(const int pid, const int tid, 
                             float* sum, const unsigned long* s_gr, const unsigned long* s_gr_rect) {
  auto pref_id = pid >> 8;
  auto pid_pref= pid & 255;
  if (pref_id == 7) return;

  auto count = 0;
  for (auto pkj_id = pref_id; pkj_id < N_PKJ; pkj_id += 7) {
    wbuf_float[tid] = 0.0f;
    calc_input_pkjgr_sub(pid_pref, tid, count,      0, pkj_id, s_gr, s_gr_rect); //5*8Thread*1792PE=71680
    calc_input_pkjgr_sub(pid_pref, tid, count, OFFSET, pkj_id, s_gr, s_gr_rect); //71680
    if (tid == 0) sum[pid] = wbuf_float[0] + wbuf_float[1] + wbuf_float[2] + wbuf_float[3] + wbuf_float[4] + wbuf_float[5] + wbuf_float[6] + wbuf_float[7]; //7*1792=12544
    flush_L2();
    if (pid_pref < 16) {
      auto base = 256 * pref_id + 16 * pid_pref;
      wbuf_float[tid] = sum[tid + base] + sum[tid + OFFSET + base]; //1*8Thread
      sync_L1();
      if (tid == 0) sum[pid] = wbuf_float[0] + wbuf_float[1] + wbuf_float[2] + wbuf_float[3] + wbuf_float[4] + wbuf_float[5] + wbuf_float[6] + wbuf_float[7];
    } //8+7=15*16=240
    flush_L2();
    if (tag[0] == MTAG_PKJ && tag[1] == pkj_id) {
      auto base = 256 * pref_id;
      wbuf_float[tid] = sum[tid + base] + sum[tid + OFFSET + base]; //1*8Thread
      sync_L1();
      if (tid == 0) l_g_ex[5] += wbuf_float[0] + wbuf_float[1] + wbuf_float[2] + wbuf_float[3] + wbuf_float[4] + wbuf_float[5] + wbuf_float[6] + wbuf_float[7];
    } //8+7=15
    count++;
  } //71680*2+12544+240+15=156159*N_PKJ(32)=4997088
}

static void calc_input_stgr(const int pid, const int tid,
                            float* sum, const unsigned long* s_gr, const unsigned long* s_gr_rect) {
  auto pref_id = pid >> 8;
  auto pid_pref= pid & 255;
  if (pref_id == 7) return;

  auto count = 0;
  for (auto st_id = pref_id; st_id < N_ST; st_id += 7) {
    auto x = pid_pref & 31;
    auto y = (pid_pref >> 5) - 4 + st_id;
    auto use_rect = y < 0 || y <= Y_GO;
    auto idx = use_rect ? (y + Y_GO_4) * (X_GO + X_GO_2) + (x + X_GO_4) : y * X_GO + x;
    sync_L1();
    auto local_sum  = KAPPA_STPF * popl(use_rect ? s_gr_rect[idx * 16 + tid         ] : s_gr[idx * 16 + tid         ]); //1*8Thread*1792PE=14336
         local_sum += KAPPA_STPF * popl(use_rect ? s_gr_rect[idx * 16 + tid + OFFSET] : s_gr[idx * 16 + tid + OFFSET]); //2*8Thread*1792PE=28672
    wbuf_float[tid] = local_sum;
    if (tid == 0) sum[pid] = wbuf_float[0] + wbuf_float[1] + wbuf_float[2] + wbuf_float[3] + wbuf_float[4] + wbuf_float[5] + wbuf_float[6] + wbuf_float[7]; //7*1792PE=12544
    flush_L2();
    if (pid_pref < 16) {
      auto base = 256 * pref_id + 16 * pid_pref;
      wbuf_float[tid] = sum[tid + base] + sum[tid + OFFSET + base];
      sync_L1();
      if (tid == 0) sum[pid] = wbuf_float[0] + wbuf_float[1] + wbuf_float[2] + wbuf_float[3] + wbuf_float[4] + wbuf_float[5] + wbuf_float[6] + wbuf_float[7];
    } //240
    flush_L2();
    if (tag[0] == MTAG_ST && tag[1] == st_id + N_PKJ) {
      auto base = 256 * pref_id;
      wbuf_float[tid] = sum[tid + base] + sum[tid + OFFSET + base];
      sync_L1();
      if (tid == 0) l_g_ex[5] += wbuf_float[0] + wbuf_float[1] + wbuf_float[2] + wbuf_float[3] + wbuf_float[4] + wbuf_float[5] + wbuf_float[6] + wbuf_float[7];
    } //15
    count++;
  } //14336+28672+12544+240+15=55807*N_ST(32)=1785824
}

static void update_mol(const int pid, const int tid, const int index, const int t_i, const int t_e,
                       unsigned char* s_mol) {
  if (tag[0] != MTAG_NONE) {
    auto nid = tag[1] + IDX_H_MOL;  // tag[1] is set neuron id in molecular

    if (tid == 0) {
      auto spk      = l_spk[5];
      auto ll_u     = l_u[5];
      auto ll_g_ex  = l_g_ex[5];
      auto ll_g_inh = l_g_inh[5];
      auto ll_g_ahp = l_g_ahp[5];

      // Load const params //7*12+10(ex)+9(inh)=103
      auto inv_c = (PKJ(nid) * (INV_C_PKJ)
                   + ST(nid) * (INV_C_ST)
                   + VN(nid) * (INV_C_VN)
                   + IO(nid) * (INV_C_IO));
      auto gbar_leak = (PKJ(nid) * (GBAR_LEAK_PKJ)
                       + ST(nid) * (GBAR_LEAK_ST)
                       + VN(nid) * (GBAR_LEAK_VN)
                       + IO(nid) * (GBAR_LEAK_IO));
      auto e_leak = (PKJ(nid) * (E_LEAK_PKJ)
                    + ST(nid) * (E_LEAK_ST)
                    + VN(nid) * (E_LEAK_VN)
                    + IO(nid) * (E_LEAK_IO));
      auto gbar_ex = ( 8.0f * PKJ(nid) * (GBAR_EX_PKJ)
                     +10.0f *  ST(nid) * (GBAR_EX_ST)
                     + 5.0f *  VN(nid) * (GBAR_EX_VN)
                     +         IO(nid) * (GBAR_EX_IO));
      auto e_ex = (PKJ(nid) * (E_EX_PKJ)
                  + ST(nid) * (E_EX_ST)
                  + VN(nid) * (E_EX_VN)
                  + IO(nid) * (E_EX_IO));
      auto decay_ex = (PKJ(nid) * (DECAY_AMPA_PKJPF)
                      + ST(nid) * (DECAY_AMPA_STPF)
                      + VN(nid) * (DECAY_AMPA_VNMF)
                      + IO(nid) * (DECAY_AMPA_IO));
      auto gbar_inh = ( 0.8f * PKJ(nid) * (GBAR_INH_PKJ)
                      +         ST(nid) * (0.0f)
                      +0.05f *  VN(nid) * (GBAR_INH_VN)
                      +         IO(nid) * (GBAR_INH_IO));
      auto e_inh = (PKJ(nid) * (E_INH_PKJ)
                   + ST(nid) * (0.0f)
                   + VN(nid) * (E_INH_VN)
                   + IO(nid) * (E_INH_IO));
      auto decay_inh = (PKJ(nid) * (DECAY_GABA_PKJST)
                       + ST(nid) * (0.0f)
                       + VN(nid) * (DECAY_GABA_VNPKJ)
                       + IO(nid) * (0.0f));
      auto th = (PKJ(nid) * (TH_PKJ)
                + ST(nid) * (TH_ST)
                + VN(nid) * (TH_VN)
                + IO(nid) * (TH_IO));
      auto gbar_ahp = (PKJ(nid) * (GBAR_AHP_PKJ)
                      + ST(nid) * (GBAR_AHP_ST)
                      + VN(nid) * (GBAR_AHP_VN)
                      + IO(nid) * (GBAR_AHP_IO));
      auto e_ahp = (PKJ(nid) * (E_AHP_PKJ)
                   + ST(nid) * (E_AHP_ST)
                   + VN(nid) * (E_AHP_VN)
                   + IO(nid) * (E_AHP_IO));
      auto decay_ahp = (PKJ(nid) * (DECAY_AHP_PKJ)
                       + ST(nid) * (DECAY_AHP_ST)
                       + VN(nid) * (DECAY_AHP_VN)
                       + IO(nid) * (DECAY_AHP_IO));
      auto i_ex = (0.7f * PKJ(nid) * (I_EX_PKJ)
                  +0.7f *  ST(nid) * (I_EX_ST)
                  +0.1f *  VN(nid) * (I_EX_VN)
                  +1.0f *  IO(nid) * (I_EX_IO));

      // update conductances
      switch (tag[0]) {
        case MTAG_PKJ: { //11
          auto rnd = genrand(tid);
          auto coef = (             1.0f * (                rnd < 0.25f)
                      +DECAY_GABA_PKJST  * (0.25f <= rnd && rnd < 0.5f )
                      +DECAY_GABA_PKJST2 * (0.5f  <= rnd && rnd < 0.75f)
                      +DECAY_GABA_PKJST3 * (0.75f <= rnd)); //7
          ll_g_inh += 1.2f * GAMMA_PKJST * s_mol[tag[1] + N_PKJ] * coef; //3
        } break;
        case MTAG_ST: {
        } break;
        case MTAG_VN: { //6+128+2+1=137
          auto s = 0;
          auto mf_firing_rate = 0.03f * 0.5f * (1.0f - cos(2.0f * 3.141592653f * (t_e + t_i) * INV_N_PERIOD)); //6
          auto sum = 0.0f;
          for (auto i = 0; i < N_PKJ; i++) {
            sum += R_AMPA_VNMF * (genrand(tid) < mf_firing_rate) * 0.03125f; //0.03125f = 1/32
            s += s_mol[i];
          } //4*N_PKJ(32)=128
          ll_g_inh += GAMMA_VNPKJ * s; //2
          ll_g_ex += sum; //1
        } break;
        case MTAG_IO: { //8
          auto mf_firing_rate = 0.003f * 0.5f * (1.0f - cos(2.0f * 3.141592653f * (t_e + t_i) * INV_N_PERIOD));
          ll_g_ex += (genrand(tid) < mf_firing_rate);
        } break;
      }

      // update v //17+21+11=49
      auto du1 = DT * inv_c * (-gbar_leak            * (ll_u - e_leak)
                               -gbar_ex   * ll_g_ex  * (ll_u - e_ex)
                               -gbar_inh  * ll_g_inh * (ll_u - e_inh)
                               -gbar_ahp  * ll_g_ahp * (ll_u - e_ahp)
                               +i_ex); //17
      auto du2 = DT * inv_c * (-gbar_leak            * (ll_u + du1 - e_leak)
                               -gbar_ex   * ll_g_ex  * (ll_u + du1 - e_ex)
                               -gbar_inh  * ll_g_inh * (ll_u + du1 - e_inh)
                               -gbar_ahp  * ll_g_ahp * (ll_u + du1 - e_ahp)
                               +i_ex); //21

      ll_u += 0.5f * (du1 + du2); //3
      spk = ll_u > th;
      ll_g_ex *= decay_ex; //1
      ll_g_inh *= decay_inh; //1
      ll_g_ahp = ll_g_ahp * decay_ahp * (!spk) + spk; //3
      l_u[5]        = e_leak * spk + ll_u * (!spk); //3
      l_g_ex[5]     = ll_g_ex;
      l_g_inh[5]    = ll_g_inh;
      l_g_ahp[5]    = ll_g_ahp;
      l_spk[5]      = spk;
      s_mol[tag[1]] = spk;
    }
  } //103*N_MOL(66)+11*N_PKJ+137+8+49*N_MOL=10529
  flush_L1();
}

static void store_spikes(const int pid, const int tid, const int index, const int t_i, char* spkp_buf,
                         const unsigned long* s_gr, const unsigned char* s_go, const unsigned char* s_mol) {
       if (index < T_GR_P)  spkp_buf[t_i * N_ALL_P + index] = (char)(s_gr[pid] & (1UL << tid));
  else if (index < T_GO_P)  spkp_buf[t_i * N_ALL_P + index] =  s_go[index - N_GR_P];
  else if (index < T_PKJ_P) spkp_buf[t_i * N_ALL_P + index] = s_mol[index - N_GR_P - N_GO_P];
  else if (index < T_ST_P)  spkp_buf[t_i * N_ALL_P + index] = s_mol[index - N_GR_P - N_GO_P];
  else if (index < T_VN_P)  spkp_buf[t_i * N_ALL_P + index] = s_mol[index - N_GR_P - N_GO_P];
  else if (index < T_IO_P)  spkp_buf[t_i * N_ALL_P + index] = s_mol[index - N_GR_P - N_GO_P];
  flush_L1();
}

void pzc_kernel(unsigned short* lists,
                unsigned long* s_gr, unsigned long* s_gr_rect, unsigned char* s_go, unsigned char* s_mol,
                float* u, float* g_ex, float* g_inh, float* g_ahp,
                float* sum, unsigned int* w, char* spikep_buf, float* debug, const int t_e) {
  auto tid = get_tid();
  auto pid = get_pid();
  auto index = pid * MAX_TID + tid;

#ifdef PROF
  PZCPerformance stc_all, stc, etc;
  if (pid == 0 && tid == 0) { stc_all.Update(); }
#endif

  for (auto t_i = 0; t_i < T_I; t_i++) {
#ifdef PROF
    if (pid == 0 && tid == 0) { stc.Update(); }
#endif

    {
      update_gr(pid, tid, index, t_e, t_i, u, g_ex, g_inh, g_ahp, s_gr, lists + N_GO * N_GO, s_go);
      flush();
    }

#ifdef PROF
    if (pid == 0 && tid == 0) {
      etc.Update();
      gPerf[UPDATE_GR] = etc - stc;
      stc.Update();
    }
#endif

    {
      calc_input_pkjgr(pid, tid, sum, s_gr, s_gr_rect);
    }

#ifdef PROF
    if (pid == 0 && tid == 0) {
      etc.Update();
      gPerf[CALC_INPUT_PKJ] = etc - stc;
      stc.Update();
    }
#endif

    {
      calc_input_stgr(pid, tid, sum, s_gr, s_gr_rect);
    }

#ifdef PROF
    if (pid == 0 && tid == 0) {
      etc.Update();
      gPerf[CALC_INPUT_ST] = etc - stc;
      stc.Update();
    }
#endif

    {
      update_go(pid, tid, index, t_e, t_i, s_go, lists, s_gr_rect);
      flush();
    }

#ifdef PROF
    if (pid == 0 && tid == 0) {
      etc.Update();
      gPerf[UPDATE_GO] = etc - stc;
      stc.Update();
    }
#endif

    {
      update_mol(pid, tid, index, t_i, t_e, s_mol);
      flush();
    }

#ifdef PROF
    if (pid == 0 && tid == 0) {
      etc.Update();
      gPerf[UPDATE_MOL] = etc - stc;
      stc.Update();
    }
#endif
    if ((t_e + t_i + 1) % 1000 == 0) {
      for (unsigned int i = index; i < N_S_GR; i += N_MAX_THREADS) {
        const unsigned long *spk = &s_gr[i];

        for (unsigned char k = 0; k < 16; k++) {
          unsigned int w_all = w[i * 16 + k];

          unsigned char s[4];
          s[0] = get_spike(*spk, 4 * k    );
          s[1] = get_spike(*spk, 4 * k + 1);
          s[2] = get_spike(*spk, 4 * k + 2);
          s[3] = get_spike(*spk, 4 * k + 3);

          float w_tmp[4];
          w_tmp[0] = ( w_all        & 0xFF) * INV_BYTE;
          w_tmp[1] = ((w_all >>  8) & 0xFF) * INV_BYTE;
          w_tmp[2] = ((w_all >> 16) & 0xFF) * INV_BYTE;
          w_tmp[3] = ((w_all >> 24) & 0xFF) * INV_BYTE;
          
          w_tmp[0] += (WINIT - w_tmp[0]) * BETA * s[0];
          w_tmp[1] += (WINIT - w_tmp[1]) * BETA * s[1];
          w_tmp[2] += (WINIT - w_tmp[2]) * BETA * s[2];
          w_tmp[3] += (WINIT - w_tmp[3]) * BETA * s[3];

          s[3] = (int)(w_tmp[0] * 255) & 0xFF;
          s[2] = (int)(w_tmp[1] * 255) & 0xFF;
          s[1] = (int)(w_tmp[2] * 255) & 0xFF;
          s[0] = (int)(w_tmp[3] * 255) & 0xFF;

          w[i * 16 + k] = *((unsigned int*)s);
        }
      }
      flush();
      auto pref_id  = pid >> 8;
      auto pid_pref = pid & 255;
      auto x = pid_pref & 31;
      auto y = pid_pref >> 5;
      for (auto i = 0; i < 5; i++) {
        auto ax = x + X_GO_4;
        auto ay = y + (pref_id + i * 7) - 4 + Y_GO_4;
        auto cluster_id = ay * (X_GO + X_GO_2) + ax;
        if (cluster_id > (X_GO + X_GO_2) * (Y_GO + Y_GO_2)) break;

        for (auto j = tid; j < 256; j++)
          l_w[i * 256 + j] = w[cluster_id * 256 + j];
      }
    }
#ifdef PRINT
    {
      store_spikes(pid, tid, index, t_i, spikep_buf, s_gr, s_go, s_mol);
      flush();
    }
#endif
  }

#ifdef PROF
  if (pid == 0 && tid == 0) {
    etc.Update();
    gPerf[ALL] = etc - stc_all;
  }
#endif

  flush();
  return;
}
